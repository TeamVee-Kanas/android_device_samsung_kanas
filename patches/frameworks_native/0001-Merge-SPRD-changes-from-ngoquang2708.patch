From b85de9770dcac807bed4ecf4d44ac98e92282baf Mon Sep 17 00:00:00 2001
From: Caio Oliveira <caiooliveirafarias0@gmail.com>
Date: Fri, 22 Jul 2016 12:10:10 -0300
Subject: [PATCH] Merge SPRD changes from @ngoquang2708

Change-Id: Ia4fb84dbebc2ac2fea1db3d41cc497ab3aa892ab
Signed-off-by: Caio Oliveira <caiooliveirafarias0@gmail.com>
---
 include/binder/MemoryHeapIon.h             |  77 ++--
 include/media/openmax/OMX_Audio.h          |  20 +
 include/media/openmax/OMX_IVCommon.h       |   3 +
 include/media/openmax/OMX_Index.h          |  19 +
 include/ui/PixelFormat.h                   |   3 +
 libs/binder/Android.mk                     |  51 +--
 libs/binder/IPCThreadState.cpp             |   8 +-
 libs/binder/MemoryHeapIon.cpp              | 594 ++++++++++++++++++++++-------
 libs/ui/GraphicBufferAllocator.cpp         |   4 +
 services/surfaceflinger/Android.mk         |   4 +
 services/surfaceflinger/DisplayDevice.cpp  |   8 +
 services/surfaceflinger/SurfaceFlinger.cpp |   4 +
 12 files changed, 579 insertions(+), 216 deletions(-)

diff --git a/include/binder/MemoryHeapIon.h b/include/binder/MemoryHeapIon.h
index 7e059f4..3e155f4 100644
--- a/include/binder/MemoryHeapIon.h
+++ b/include/binder/MemoryHeapIon.h
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2008 The Android Open Source Project
- * Copyright 2011, Samsung Electronics Co. LTD
+ * Copyright (c) 2011, Code Aurora Forum. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,55 +14,58 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-/*!
- * \file MemoryHeapIon.h
- * \brief header file for MemoryHeapIon
- * \author MinGu, Jeon(mingu85.jeon)
- * \date 2011/11/20
- *
- * <b>Revision History: </b>
- * - 2011/11/21 : MinGu, Jeon(mingu85.jeon)) \n
- * Initial version
- * - 2012/11/29 : MinGu, Jeon(mingu85.jeon)) \n
- * Change name
- */
 
 #ifndef ANDROID_MEMORY_HEAP_ION_H
 #define ANDROID_MEMORY_HEAP_ION_H
 
-#include <binder/IMemory.h>
-#include <binder/MemoryHeapBase.h>
 #include <stdlib.h>
+#include <stdint.h>
 
-#define MHB_ION_HEAP_SYSTEM_CONTIG_MASK     (1 << 1)
-#define MHB_ION_HEAP_EXYNOS_CONTIG_MASK     (1 << 4)
-#define MHB_ION_HEAP_EXYNOS_MASK            (1 << 5)
-#define MHB_ION_HEAP_SYSTEM_MASK            (1 << 6)
-
-#define MHB_ION_FLAG_CACHED                 (1 << 16)
-#define MHB_ION_FLAG_CACHED_NEEDS_SYNC      (1 << 17)
-#define MHB_ION_FLAG_PRESERVE_KMAP          (1 << 18)
+#include <binder/MemoryHeapBase.h>
+#include <binder/IMemory.h>
+#include <utils/SortedVector.h>
+#include <utils/threads.h>
 
-#define MHB_ION_EXYNOS_VIDEO_MASK           (1 << 21)
-#define MHB_ION_EXYNOS_MFC_INPUT_MASK       (1 << 25)
-#define MHB_ION_EXYNOS_MFC_OUTPUT_MASK      (1 << 26)
-#define MHB_ION_EXYNOS_GSC_MASK             (1 << 27)
-#define MHB_ION_EXYNOS_FIMD_VIDEO_MASK      (1 << 28)
+struct ion_handle;
 
 namespace android {
 
+class MemoryHeapBase;
+
+// ---------------------------------------------------------------------------
+
 class MemoryHeapIon : public MemoryHeapBase
 {
 public:
-    enum {
-        USE_ION_FD = IMemoryHeap::USE_ION_FD
-    };
-    MemoryHeapIon(size_t size, uint32_t flags = 0, char const* name = NULL);
-    MemoryHeapIon(int fd, size_t size, uint32_t flags = 0, uint32_t offset = 0);
+    MemoryHeapIon(const char*, size_t, uint32_t, long unsigned int);
+    MemoryHeapIon();
     ~MemoryHeapIon();
+
+    status_t mapIonFd(int fd, size_t size, unsigned long memory_type, int flags);
+
+    status_t ionInit(int ionFd, void *base, int size, int flags,
+                                const char* device, struct ion_handle *handle,
+                                int ionMapFd);
+    int get_phy_addr_from_ion(int *phy_addr, int *size);
+    int flush_ion_buffer(void *v_addr, void *p_addr,int size);
+    int get_gsp_iova(int *mmu_addr, int *size);
+    int free_gsp_iova(int mmu_addr, int size);
+    int get_mm_iova(int *mmu_addr, int *size);
+    int free_mm_iova(int mmu_addr, int size);
+    static int Get_gsp_iova(int buffer_fd, int *mmu_addr, int *size);
+    static int Free_gsp_iova(int buffer_fd, int mmu_addr, int size);
+    static int Get_mm_iova(int buffer_fd,int *mmu_addr, int *size);
+    static int Free_mm_iova(int buffer_fd,int mmu_addr, int size);
+    static int Get_phy_addr_from_ion(int fd, int *phy_addr, int *size);/*fd is "fd of the corresponding ion hanlde"*/
+    static int Flush_ion_buffer(int buffer_fd, void *v_addr,void *p_addr, int size);
+    static bool Gsp_iommu_is_enabled(void);
+    static bool Mm_iommu_is_enabled(void);
+
 private:
-    int mIonClient;
-};
+    int mIonDeviceFd;  /*fd we get from open("/dev/ion")*/
+    struct ion_handle *mIonHandle;  /*handle we get from ION_IOC_ALLOC*/ };
+
+// ---------------------------------------------------------------------------
+}; // namespace android
 
-};
-#endif
+#endif // ANDROID_MEMORY_HEAP_ION_H
diff --git a/include/media/openmax/OMX_Audio.h b/include/media/openmax/OMX_Audio.h
index 2aa6c95..9dd3778 100644
--- a/include/media/openmax/OMX_Audio.h
+++ b/include/media/openmax/OMX_Audio.h
@@ -135,6 +135,9 @@ typedef enum OMX_AUDIO_CODINGTYPE {
     OMX_AUDIO_CodingAC3,         /**< Any variant of AC3 encoded data */
     OMX_AUDIO_CodingAPE,         /**< Any variant of APE encoded data */
     OMX_AUDIO_CodingDTS,         /**< Any variant of DTS encoded data */
+#ifdef SPRD_HARDWARE
+    OMX_AUDIO_CodingIMAADPCM,    /**< Any variant of IMAADPCM encoded data */
+#endif
     OMX_AUDIO_CodingFFMPEG,      /**< Any variant of FFMPEG encoded data */
     OMX_AUDIO_CodingMax = 0x7FFFFFFF
 } OMX_AUDIO_CODINGTYPE;
@@ -573,6 +576,23 @@ typedef struct OMX_AUDIO_PARAM_ADPCMTYPE {
 } OMX_AUDIO_PARAM_ADPCMTYPE; 
 
 
+#ifdef SPRD_HARDWARE
+/** IMAADPCM stream format parameters */
+typedef struct OMX_AUDIO_PARAM_IMAADPCMTYPE {
+    OMX_U32 nSize;              /**< size of the structure in bytes */
+    OMX_VERSIONTYPE nVersion;   /**< OMX specification version information */
+    OMX_U32 nPortIndex;         /**< port that this structure applies to */
+    OMX_U32 nChannels;          /**< Number of channels in the data stream (not
+                                     necessarily the same as the number of channels
+                                     to be rendered. */
+    OMX_U32 nBitsPerSample;     /**< Number of bits in each sample */
+    OMX_U32 nSampleRate;        /**< Sampling rate of the source data.  Use 0 for
+                                    variable or unknown sampling rate. */
+    OMX_U32 nBlockAlign;        /**< Sampling rate of the source data.	Use 0 for
+                                    variable or unknown sampling rate. */
+} OMX_AUDIO_PARAM_IMAADPCMTYPE;
+#endif
+
 /** G723 rate */
 typedef enum OMX_AUDIO_G723RATE {
     OMX_AUDIO_G723ModeUnused = 0,  /**< AMRNB Mode unused / unknown */
diff --git a/include/media/openmax/OMX_IVCommon.h b/include/media/openmax/OMX_IVCommon.h
index 940911e..dca6a53 100644
--- a/include/media/openmax/OMX_IVCommon.h
+++ b/include/media/openmax/OMX_IVCommon.h
@@ -169,6 +169,9 @@ typedef enum OMX_COLOR_FORMATTYPE {
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03,
     OMX_SEC_COLOR_FormatNV12Tiled = 0x7FC00002,
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m = 0x7FA30C04,
+#ifdef SPRD_HARDWARE
+    OMX_SPRD_COLOR_FormatYVU420SemiPlanar = 0x7FD00001,
+#endif
     OMX_COLOR_FormatMax = 0x7FFFFFFF,
 } OMX_COLOR_FORMATTYPE;
 
diff --git a/include/media/openmax/OMX_Index.h b/include/media/openmax/OMX_Index.h
index ab3f55e..f991a4a 100644
--- a/include/media/openmax/OMX_Index.h
+++ b/include/media/openmax/OMX_Index.h
@@ -277,6 +277,25 @@ typedef enum OMX_INDEXTYPE {
        private indexes are not guaranteed unique and therefore should
        only be sent to the appropriate component. */
 
+#ifdef SPRD_HARDWARE
+    /* for Android Native Window */
+#define SPRD_INDEX_PARAM_ENABLE_ANB "OMX.google.android.index.enableAndroidNativeBuffers"
+    OMX_IndexParamEnableAndroidBuffers         = 0x7F000011,
+#define SPRD_INDEX_PARAM_GET_ANB "OMX.google.android.index.getAndroidNativeBufferUsage"
+    OMX_IndexParamGetAndroidNativeBuffer       = 0x7F000012,
+#define SPRD_INDEX_PARAM_USE_ANB "OMX.google.android.index.useAndroidNativeBuffer2"
+    OMX_IndexParamUseAndroidNativeBuffer2      = 0x7F000013,
+    /* for Android Store Metadata Inbuffer */
+#define SPRD_INDEX_PARAM_STORE_METADATA_BUFFER "OMX.google.android.index.storeMetaDataInBuffers"
+    OMX_IndexParamStoreMetaDataBuffer          = 0x7F000014,
+#define SPRD_INDEX_PARAM_PREPEND_SPSPPS_TO_IDR "OMX.google.android.index.prependSPSPPSToIDRFrames"
+    OMX_IndexParamPrependSPSPPSToIDR           = 0x7F000015,
+#define SPRD_INDEX_CONFIG_THUMBNAIL_MODE "OMX.sprd.index.ThumbnailMode"
+    OMX_IndexConfigThumbnailMode               = 0x7F000016,
+
+    OMX_IndexParamAudioImaAdpcm = 0x7FA7B09C,/**< reference: OMX_AUDIO_PARAM_IMAADPCMTYPE */
+#endif
+
 #ifdef MTK_HARDWARE
     OMX_IndexVendorMtkOmxVdecTimeSource        = 0x7F000001,
     OMX_IndexVendorMtkOmxVdecThumbnailMode     = 0x7F00000A,
diff --git a/include/ui/PixelFormat.h b/include/ui/PixelFormat.h
index 79a29bc..5d960b1 100644
--- a/include/ui/PixelFormat.h
+++ b/include/ui/PixelFormat.h
@@ -63,6 +63,9 @@ enum {
     PIXEL_FORMAT_BGRA_8888   = HAL_PIXEL_FORMAT_BGRA_8888,  // 4x8-bit BGRA
     PIXEL_FORMAT_RGBA_5551   = 6,                           // 16-bit ARGB
     PIXEL_FORMAT_RGBA_4444   = 7,                           // 16-bit ARGB
+#ifdef SPRD_HARDWARE
+    PIXEL_FORMAT_YCbCr_420_SP= 25,
+#endif
 };
 
 typedef int32_t PixelFormat;
diff --git a/libs/binder/Android.mk b/libs/binder/Android.mk
index 7861fef..e4fc7d2 100644
--- a/libs/binder/Android.mk
+++ b/libs/binder/Android.mk
@@ -29,60 +29,39 @@ sources := \
     MemoryDealer.cpp \
     MemoryBase.cpp \
     MemoryHeapBase.cpp \
+    MemoryHeapIon.cpp \
     Parcel.cpp \
     PermissionCache.cpp \
     ProcessState.cpp \
     Static.cpp \
-    TextOutput.cpp \
-
-ifeq ($(BOARD_NEEDS_MEMORYHEAPPMEM),true)
-sources += \
-    MemoryHeapPmem.cpp
-endif
-
-ifeq ($(BOARD_NEEDS_MEMORYHEAPION),true)
-sources += \
-    MemoryHeapIon.cpp
-endif
+    TextOutput.cpp
 
 LOCAL_PATH:= $(call my-dir)
 
-include $(CLEAR_VARS)
+$(warning sec:${USE_PROJECT_SEC})
 
-ifeq ($(BOARD_NEEDS_MEMORYHEAPION),true)
-LOCAL_SHARED_LIBRARIES += libion_exynos
-LOCAL_CFLAGS += -DUSE_MEMORY_HEAP_ION
-ifneq ($(TARGET_SLSI_VARIANT),)
-PLATFORM_DIR := $(TARGET_BOARD_PLATFORM)-$(TARGET_SLSI_VARIANT)
-else
-PLATFORM_DIR := $(TARGET_BOARD_PLATFORM)
-endif
-LOCAL_C_INCLUDES += hardware/samsung_slsi/$(PLATFORM_DIR)/include
+include $(CLEAR_VARS)
+ifeq ($(USE_PROJECT_SEC),true)
+LOCAL_C_INCLUDES := \
+	$(LOCAL_PATH) \
+	$(TOP)/external/sqlite/dist
+LOCAL_SHARED_LIBRARIES := libsqlite
+LOCAL_CFLAGS += -DUSE_PROJECT_SEC
+LOCAL_LDFLAGS += $(TOP)/frameworks/native/libs/libsecbinder/libsecbinder.a
 endif
-
 LOCAL_LDLIBS += -lpthread
 LOCAL_MODULE := libbinder
 LOCAL_SHARED_LIBRARIES += liblog libcutils libutils
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_C_INCLUDES += $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include
 LOCAL_SRC_FILES := $(sources)
-
 include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
-
-ifeq ($(BOARD_NEEDS_MEMORYHEAPION),true)
-LOCAL_SHARED_LIBRARIES += libion_exynos
-LOCAL_CFLAGS += -DUSE_MEMORY_HEAP_ION
-ifneq ($(TARGET_SLSI_VARIANT),)
-PLATFORM_DIR := $(TARGET_BOARD_PLATFORM)-$(TARGET_SLSI_VARIANT)
-else
-PLATFORM_DIR := $(TARGET_BOARD_PLATFORM)
-endif
-LOCAL_C_INCLUDES += hardware/samsung_slsi/$(PLATFORM_DIR)/include
-endif
-
 LOCAL_LDLIBS += -lpthread
 LOCAL_MODULE := libbinder
 LOCAL_STATIC_LIBRARIES += libutils
 LOCAL_SRC_FILES := $(sources)
-
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_C_INCLUDES += $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include
 include $(BUILD_STATIC_LIBRARY)
diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index 74b03a1..70d7771 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -1139,9 +1139,15 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
     case BR_SPAWN_LOOPER:
         mProcess->spawnPooledThread(false);
         break;
-        
+
+    //For Bug#305183, to deal with BR_TRANSACTION_COMPLETE cmd
+    case BR_TRANSACTION_COMPLETE:
+        ALOGE("*** BAD COMMAND: BR_TRANSACTION_COMPLETE(%x) for executeCommand from Binder driver\n", cmd);
+        break;
+
     default:
         printf("*** BAD COMMAND %d received from Binder driver\n", cmd);
+        ALOGE("*** BAD COMMAND %x received from Binder driver\n", cmd);
         result = UNKNOWN_ERROR;
         break;
     }
diff --git a/libs/binder/MemoryHeapIon.cpp b/libs/binder/MemoryHeapIon.cpp
index 374b72e..dde8de9 100644
--- a/libs/binder/MemoryHeapIon.cpp
+++ b/libs/binder/MemoryHeapIon.cpp
@@ -1,12 +1,12 @@
 /*
- * Copyright Samsung Electronics Co.,LTD.
- * Copyright (C) 2011 The Android Open Source Project
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (c) 2011, Code Aurora Forum. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,176 +14,486 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-/*!
- * \file MemoryHeapIon.cpp
- * \brief source file for MemoryHeapIon
- * \author MinGu, Jeon(mingu85.jeon)
- * \date 2011/11/20
- *
- * <b>Revision History: </b>
- * - 2011/11/20 : MinGu, Jeon(mingu85.jeon)) \n
- * Initial version
- * - 2012/11/29 : MinGu, Jeon(mingu85.jeon)) \n
- * Change name
- */
+
+#define LOG_TAG "MemoryHeapIon"
 
 #include <stdlib.h>
 #include <stdint.h>
 #include <unistd.h>
 #include <fcntl.h>
+#include <errno.h>
 #include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+
 #include <cutils/log.h>
-#include <binder/MemoryHeapBase.h>
-#include <binder/IMemory.h>
+
 #include <binder/MemoryHeapIon.h>
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/mman.h>
-#include "ion.h"
+#include <binder/MemoryHeapBase.h>
+
+#ifdef USE_TARGET_SIMULATOR_MODE
+#include <linux/ion.h>
+//modify for make sdk
+struct ion_phys_data {
+    int fd_buffer;
+    unsigned long phys;
+    size_t size;
+};
 
-#define HEAP_MASK_FILTER    ((1 << 16) - (2))
-#define FLAG_MASK_FILTER    (~(HEAP_MASK_FILTER) - (1))
+struct ion_msync_data {
+    int fd_buffer;
+    void *vaddr;
+    void *paddr;
+    size_t size;
+};
+
+enum ION_SPRD_CUSTOM_CMD {
+    ION_SPRD_CUSTOM_PHYS,
+    ION_SPRD_CUSTOM_MSYNC
+};
+#else
+#include <linux/ion.h>
+#include <video/ion_sprd.h>
+#endif
 
 namespace android {
 
-uint32_t ion_HeapMask_valid_check(uint32_t flags)
-{
-    uint32_t heap_mask, result;
-    result = 0;
-
-    heap_mask = flags & HEAP_MASK_FILTER;
-
-    switch(heap_mask) {
-        case MHB_ION_HEAP_SYSTEM_MASK:
-            return ION_HEAP_SYSTEM_MASK;
-        case MHB_ION_HEAP_SYSTEM_CONTIG_MASK:
-            return ION_HEAP_SYSTEM_CONTIG_MASK;
-        case MHB_ION_HEAP_EXYNOS_CONTIG_MASK:
-            return ION_HEAP_EXYNOS_CONTIG_MASK;
-        case MHB_ION_HEAP_EXYNOS_MASK:
-            return ION_HEAP_EXYNOS_MASK;
-        default:
-            ALOGE("MemoryHeapIon : Heap Mask flag is default (flags:%x)", flags);
-            return 0;
-            break;
+int  MemoryHeapIon::Get_phy_addr_from_ion(int buffer_fd, int *phy_addr, int *size){
+    int fd = open("/dev/ion", O_SYNC);
+    if(fd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_phys_data phys_data;
+        struct ion_custom_data  custom_data;
+        phys_data.fd_buffer = buffer_fd;
+        custom_data.cmd = ION_SPRD_CUSTOM_PHYS;
+        custom_data.arg = (unsigned long)&phys_data;
+        ret = ioctl(fd,ION_IOC_CUSTOM,&custom_data);
+        *phy_addr = phys_data.phys;
+        *size = phys_data.size;
+        close(fd);
+        if(ret)
+        {
+            ALOGE("%s: Getphyaddr error!",__func__);
+            return -2;
+        }
+    }
+    return 0;
+}
+
+int MemoryHeapIon::get_phy_addr_from_ion(int *phy_addr, int *size){
+    if(mIonDeviceFd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_phys_data phys_data;
+        struct ion_custom_data  custom_data;
+        phys_data.fd_buffer = MemoryHeapBase::getHeapID();
+        custom_data.cmd = ION_SPRD_CUSTOM_PHYS;
+        custom_data.arg = (unsigned long)&phys_data;
+        ret = ioctl(mIonDeviceFd,ION_IOC_CUSTOM,&custom_data);
+        *phy_addr = phys_data.phys;
+        *size = phys_data.size;
+        if(ret)
+        {
+            ALOGE("%s: getphyaddr error!",__func__);
+            return -2;
+        }
+     }
+    return 0;
+}
+
+int MemoryHeapIon::get_gsp_iova(int *mmu_addr, int *size){
+    if(mIonDeviceFd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+        mmu_data.fd_buffer = MemoryHeapBase::getHeapID();
+        custom_data.cmd = ION_SPRD_CUSTOM_GSP_MAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(mIonDeviceFd,ION_IOC_CUSTOM,&custom_data);
+        *mmu_addr = mmu_data.iova_addr;
+        *size = mmu_data.iova_size;
+        if(ret)
+        {
+            ALOGE("%s: get gsp iova error!",__func__);
+            return -2;
+        }
+     }
+    return 0;
+}
+
+int MemoryHeapIon::free_gsp_iova(int mmu_addr, int size){
+    if(mIonDeviceFd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+        mmu_data.fd_buffer = MemoryHeapBase::getHeapID();
+        mmu_data.iova_addr = mmu_addr;
+        mmu_data.iova_size = size;
+        custom_data.cmd = ION_SPRD_CUSTOM_GSP_UNMAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(mIonDeviceFd,ION_IOC_CUSTOM,&custom_data);
+        if(ret)
+        {
+            ALOGE("%s: free gsp iova error!",__func__);
+            return -2;
+        }
+     }
+    return 0;
+}
+
+int MemoryHeapIon::get_mm_iova(int *mmu_addr, int *size){
+    if(mIonDeviceFd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+        mmu_data.fd_buffer = MemoryHeapBase::getHeapID();
+        custom_data.cmd = ION_SPRD_CUSTOM_MM_MAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(mIonDeviceFd,ION_IOC_CUSTOM,&custom_data);
+        *mmu_addr = mmu_data.iova_addr;
+        *size = mmu_data.iova_size;
+        if(ret)
+        {
+            ALOGE("%s: get mm iova error!",__func__);
+            return -2;
+        }
+     }
+    return 0;
+}
+
+int MemoryHeapIon::free_mm_iova(int mmu_addr, int size){
+    if(mIonDeviceFd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+        mmu_data.fd_buffer = MemoryHeapBase::getHeapID();
+        mmu_data.iova_addr = mmu_addr;
+        mmu_data.iova_size = size;
+        custom_data.cmd = ION_SPRD_CUSTOM_MM_UNMAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(mIonDeviceFd,ION_IOC_CUSTOM,&custom_data);
+        if(ret)
+        {
+            ALOGE("%s: free mm iova error!",__func__);
+            return -2;
+        }
+     }
+    return 0;
+}
+int MemoryHeapIon::Get_gsp_iova(int buffer_fd,int *mmu_addr, int *size){
+    int fd = open("/dev/ion", O_SYNC);
+    if(fd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+
+        mmu_data.fd_buffer = buffer_fd;
+        custom_data.cmd = ION_SPRD_CUSTOM_GSP_MAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(fd,ION_IOC_CUSTOM,&custom_data);
+        *mmu_addr = mmu_data.iova_addr;
+        *size = mmu_data.iova_size;
+        close(fd);
+        if(ret)
+        {
+            ALOGE("%s: Get gsp iova error!",__func__);
+            return -2;
+        }
+    }
+    return 0;
+}
+int MemoryHeapIon::Get_mm_iova(int buffer_fd,int *mmu_addr, int *size){
+    int fd = open("/dev/ion", O_SYNC);
+    if(fd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+
+        mmu_data.fd_buffer =  buffer_fd;
+        custom_data.cmd = ION_SPRD_CUSTOM_MM_MAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(fd,ION_IOC_CUSTOM,&custom_data);
+        *mmu_addr = mmu_data.iova_addr;
+        *size = mmu_data.iova_size;
+        close(fd);
+        if(ret)
+        {
+            ALOGE("%s: Get mm iova error!",__func__);
+            return -2;
+        }
+    }
+    return 0;
+}
+
+int MemoryHeapIon::Free_gsp_iova(int buffer_fd,int mmu_addr, int size){
+    int fd = open("/dev/ion", O_SYNC);
+    if(fd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
+
+        mmu_data.fd_buffer = buffer_fd;
+        mmu_data.iova_addr = mmu_addr;
+        mmu_data.iova_size = size;
+        custom_data.cmd = ION_SPRD_CUSTOM_GSP_UNMAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(fd,ION_IOC_CUSTOM,&custom_data);
+        close(fd);
+        if(ret)
+        {
+            ALOGE("%s: Free gsp iova error!",__func__);
+            return -2;
+        }
     }
-    ALOGE("MemoryHeapIon : Heap Mask flag is wrong (flags:%x)", flags);
     return 0;
 }
+int MemoryHeapIon::Free_mm_iova(int buffer_fd,int mmu_addr, int size){
+    int fd = open("/dev/ion", O_SYNC);
+    if(fd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_mmu_data mmu_data;
+        struct ion_custom_data  custom_data;
 
-uint32_t ion_FlagMask_valid_check(uint32_t flags)
+        mmu_data.fd_buffer = buffer_fd;
+        mmu_data.iova_addr = mmu_addr;
+        mmu_data.iova_size = size;
+        custom_data.cmd = ION_SPRD_CUSTOM_MM_UNMAP;
+        custom_data.arg = (unsigned long)&mmu_data;
+        ret = ioctl(fd,ION_IOC_CUSTOM,&custom_data);
+        close(fd);
+        if(ret)
+        {
+            ALOGE("%s: Free mm iova error!",__func__);
+            return -2;
+        }
+    }
+    return 0;
+}
+
+bool MemoryHeapIon::Gsp_iommu_is_enabled(void)
 {
-    uint32_t flag_mask, result;
-    result = 0;
-
-    flag_mask = flags & FLAG_MASK_FILTER;
-
-    if (flag_mask & MHB_ION_FLAG_CACHED)
-        result |= ION_FLAG_CACHED;
-    if (flag_mask & MHB_ION_FLAG_CACHED_NEEDS_SYNC)
-        result |= ION_FLAG_CACHED_NEEDS_SYNC;
-    if (flag_mask & MHB_ION_FLAG_PRESERVE_KMAP)
-        result |= ION_FLAG_PRESERVE_KMAP;
-    if (flag_mask & MHB_ION_EXYNOS_VIDEO_MASK)
-        result |= ION_EXYNOS_VIDEO_MASK;
-    if (flag_mask & MHB_ION_EXYNOS_MFC_INPUT_MASK)
-        result |= ION_EXYNOS_MFC_INPUT_MASK;
-    if (flag_mask & MHB_ION_EXYNOS_MFC_OUTPUT_MASK)
-        result |= ION_EXYNOS_MFC_OUTPUT_MASK;
-    if (flag_mask & MHB_ION_EXYNOS_GSC_MASK)
-        result |= ION_EXYNOS_GSC_MASK;
-    if (flag_mask & MHB_ION_EXYNOS_FIMD_VIDEO_MASK)
-        result |= ION_EXYNOS_FIMD_VIDEO_MASK;
-
-    return result;
-}
-
-MemoryHeapIon::MemoryHeapIon(size_t size, uint32_t flags, char const *name):MemoryHeapBase()
+	if(access("/dev/sprd_iommu_gsp",F_OK)<0)
+	{
+		return false;
+	}
+	return true;
+}
+
+bool MemoryHeapIon::Mm_iommu_is_enabled(void)
 {
-    void* base = NULL;
-    int fd = -1;
-    uint32_t isReadOnly, heapMask, flagMask;
-
-    mIonClient = ion_client_create();
-
-    if (mIonClient < 0) {
-        ALOGE("MemoryHeapIon : ION client creation failed : %s", strerror(errno));
-        mIonClient = -1;
-    } else {
-        isReadOnly = flags & (IMemoryHeap::READ_ONLY);
-        heapMask = ion_HeapMask_valid_check(flags);
-        flagMask = ion_FlagMask_valid_check(flags);
-
-        if (heapMask) {
-            ALOGD("MemoryHeapIon : Allocated with size:%d, heap:0x%X , flag:0x%X", size, heapMask, flagMask);
-            fd = ion_alloc(mIonClient, size, 0, heapMask, flagMask);
-            if (fd < 0) {
-                ALOGE("MemoryHeapIon : ION Reserve memory allocation failed(size[%u]) : %s", size, strerror(errno));
-                if (errno == ENOMEM) { // Out of reserve memory. So re-try allocating in system heap
-                    ALOGD("MemoryHeapIon : Re-try Allocating in default heap - SYSTEM heap");
-                    fd = ion_alloc(mIonClient, size, 0, ION_HEAP_SYSTEM_MASK, ION_FLAG_CACHED | ION_FLAG_CACHED_NEEDS_SYNC | ION_FLAG_PRESERVE_KMAP);
-                }
-            }
-        } else {
-            fd = ion_alloc(mIonClient, size, 0, ION_HEAP_SYSTEM_MASK, ION_FLAG_CACHED | ION_FLAG_CACHED_NEEDS_SYNC | ION_FLAG_PRESERVE_KMAP);
-            ALOGD("MemoryHeapIon : Allocated with default heap - SYSTEM heap");
-        }
+	if(access("/dev/sprd_iommu_mm",F_OK)<0)
+	{
+		return false;
+	}
+	return true;
+}
 
-        flags = isReadOnly | heapMask | flagMask;
-
-        if (fd < 0) {
-            ALOGE("MemoryHeapIon : ION memory allocation failed(size[%u]) : %s", size, strerror(errno));
-        } else {
-            flags |= USE_ION_FD;
-            base = ion_map(fd, size, 0);
-            if (base != MAP_FAILED) {
-                init(fd, base, size, flags, NULL);
-            } else {
-                ALOGE("MemoryHeapIon : ION mmap failed(size[%u], fd[%d]) : %s", size, fd, strerror(errno));
-                ion_free(fd);
-            }
+int  MemoryHeapIon::Flush_ion_buffer(int buffer_fd, void *v_addr,void *p_addr,int size){
+       int fd = open("/dev/ion", O_SYNC);
+    if(fd<0){
+        ALOGE("%s:open dev ion error!",__func__);
+        return -1;
+    }else{
+        int ret;
+        struct ion_msync_data msync_data;
+        struct ion_custom_data  custom_data;
+
+        msync_data.fd_buffer = buffer_fd;
+        msync_data.vaddr = v_addr;
+        msync_data.paddr = p_addr;
+        msync_data.size = size;
+        custom_data.cmd = ION_SPRD_CUSTOM_MSYNC;
+        custom_data.arg = (unsigned long)&msync_data;
+        ret = ioctl(fd,ION_IOC_CUSTOM,&custom_data);
+        close(fd);
+        if(ret)
+        {
+            ALOGE("%s: Flush ion buffer error!",__func__);
+            return -2;
         }
     }
+    return 0;
+}
+
+int MemoryHeapIon::flush_ion_buffer(void *v_addr, void *p_addr,int size){
+    if(mIonDeviceFd<0){
+        return -1;
+    }else{
+        int ret;
+        struct ion_msync_data msync_data;
+        struct ion_custom_data  custom_data;
+
+        if ((v_addr<MemoryHeapBase::getBase())  ||  (v_addr+size>MemoryHeapBase::getBase()+MemoryHeapBase::getSize())){
+             ALOGE("flush_ion_buffer error  mBase=0x%x,mSize=0x%x",MemoryHeapBase::getBase(), MemoryHeapBase::getSize());
+             ALOGE("flush_ion_buffer error  v_addr=0x%x,p_addr=0x%x,size=0x%x",v_addr,p_addr,size);
+             return -3;
+        }
+        msync_data.fd_buffer = MemoryHeapBase::getHeapID();
+        msync_data.vaddr = v_addr;
+        msync_data.paddr = p_addr;
+        msync_data.size = size;
+        custom_data.cmd = ION_SPRD_CUSTOM_MSYNC;
+        custom_data.arg = (unsigned long)&msync_data;
+        ret = ioctl(mIonDeviceFd,ION_IOC_CUSTOM,&custom_data);
+        if(ret)
+        {
+            ALOGE("%s:flush ion buffer error!",__func__);
+            return -2;
+        }
+     }
+    return 0;
+}
+
+MemoryHeapIon::MemoryHeapIon() : mIonDeviceFd(-1), mIonHandle(NULL)
+{
 }
 
-MemoryHeapIon::MemoryHeapIon(int fd, size_t size, uint32_t flags, uint32_t offset):MemoryHeapBase()
+MemoryHeapIon::MemoryHeapIon(const char* device, size_t size,
+    uint32_t flags, unsigned long memory_types)
+    : MemoryHeapBase()
 {
-    void* base = NULL;
-    int dup_fd = -1;
-
-    mIonClient = ion_client_create();
-
-    if (mIonClient < 0) {
-        ALOGE("MemoryHeapIon : ION client creation failed : %s", strerror(errno));
-        mIonClient = -1;
-    } else {
-        if (fd >= 0) {
-            dup_fd = dup(fd);
-            if (dup_fd == -1) {
-                ALOGE("MemoryHeapIon : cannot dup fd (size[%u], fd[%d]) : %s", size, fd, strerror(errno));
-            } else {
-                flags |= USE_ION_FD;
-                base = ion_map(dup_fd, size, 0);
-                if (base != MAP_FAILED) {
-                    init(dup_fd, base, size, flags, NULL);
-                } else {
-                    ALOGE("MemoryHeapIon : ION mmap failed(size[%u], fd[%d]): %s", size, fd, strerror(errno));
-                    ion_free(dup_fd);
-                }
+    int open_flags = O_RDONLY;
+    if (flags & NO_CACHING)
+         open_flags |= O_SYNC;
+
+    int fd = open(device, open_flags);
+    if (fd >= 0) {
+            const size_t pagesize = getpagesize();
+            size = ((size + pagesize-1) & ~(pagesize-1));
+            if (mapIonFd(fd, size, memory_types, flags) == NO_ERROR) {
+                MemoryHeapBase::setDevice(device);
             }
-        } else {
-            ALOGE("MemoryHeapIon : fd parameter error(fd : %d)", fd);
+    }else {
+        ALOGE("open ion fail");
+    }
+}
+
+status_t MemoryHeapIon::ionInit(int ionFd, void *base, int size, int flags,
+                const char* device, struct ion_handle *handle,
+                int ionMapFd) {
+    mIonDeviceFd = ionFd;
+    mIonHandle = handle;
+    MemoryHeapBase::init(ionMapFd, base, size, flags, device);
+    return NO_ERROR;
+}
+
+
+status_t MemoryHeapIon::mapIonFd(int fd, size_t size, unsigned long memory_type, int uflags)
+{
+    /* If size is 0, just fail the mmap. There is no way to get the size
+     * with ion
+     */
+    int map_fd;
+
+    struct ion_allocation_data data;
+    struct ion_fd_data fd_data;
+    struct ion_handle_data handle_data;
+    void *base = NULL;
+
+    data.len = size;
+    data.align = getpagesize();
+#if (ION_DRIVER_VERSION == 1)
+    data.heap_mask = memory_type;
+    //if cached buffer , force set the lowest two bits 11
+    if((memory_type&(1<<31)))
+    {
+        data.flags = ((memory_type&(1<<31)) | 3);
+    }
+    else
+    {
+        data.flags = 0;
+    }
+#else
+    data.flags = memory_type;
+#endif
+
+    if (ioctl(fd, ION_IOC_ALLOC, &data) < 0) {
+        ALOGE("%s: ION_IOC_ALLOC error!",__func__);
+        close(fd);
+        return -errno;
+    }
+
+    if ((uflags & DONT_MAP_LOCALLY) == 0) {
+        int flags = 0;
+
+        fd_data.handle = data.handle;
+
+        if (ioctl(fd, ION_IOC_SHARE, &fd_data) < 0) {
+            ALOGE("%s: ION_IOC_SHARE error!",__func__);
+            handle_data.handle = data.handle;
+            ioctl(fd, ION_IOC_FREE, &handle_data);
+            close(fd);
+            return -errno;
+        }
+
+        base = (uint8_t*)mmap(0, size,
+                PROT_READ|PROT_WRITE, MAP_SHARED|flags, fd_data.fd, 0);
+        if (base == MAP_FAILED) {
+            ALOGE("mmap(fd=%d, size=%u) failed (%s)",
+                    fd, uint32_t(size), strerror(errno));
+            handle_data.handle = data.handle;
+            ioctl(fd, ION_IOC_FREE, &handle_data);
+            close(fd);
+            return -errno;
         }
     }
+    mIonHandle = data.handle;
+    mIonDeviceFd = fd;
+
+    /*
+     * Call this with NULL now and set device with set_device
+     * above for consistency sake with how MemoryHeapPmem works.
+     */
+    MemoryHeapBase::init(fd_data.fd, base, size, uflags, NULL);
+
+    return NO_ERROR;
 }
 
 MemoryHeapIon::~MemoryHeapIon()
 {
-    if (mIonClient != -1) {
-        ion_unmap(getBase(), getSize());
-        ion_client_destroy(mIonClient);
-        mIonClient = -1;
+    struct ion_handle_data data;
+
+    data.handle = mIonHandle;
+
+    /*
+     * Due to the way MemoryHeapBase is set up, munmap will never
+     * be called so we need to call it ourselves here.
+     */
+    munmap(MemoryHeapBase::getBase(), MemoryHeapBase::getSize());
+    if (mIonDeviceFd > 0) {
+        ioctl(mIonDeviceFd, ION_IOC_FREE, &data);
+        close(mIonDeviceFd);
     }
 }
 
-};
+// ---------------------------------------------------------------------------
+}; // namespace android
diff --git a/libs/ui/GraphicBufferAllocator.cpp b/libs/ui/GraphicBufferAllocator.cpp
index 016692e..f8fee3d 100644
--- a/libs/ui/GraphicBufferAllocator.cpp
+++ b/libs/ui/GraphicBufferAllocator.cpp
@@ -130,6 +130,10 @@ status_t GraphicBufferAllocator::alloc(uint32_t w, uint32_t h,
     }
 #endif
 
+#ifdef SPRD_HARDWARE
+    if (format == HAL_PIXEL_FORMAT_YCbCr_420_I)
+        format = HAL_PIXEL_FORMAT_YCbCr_420_SP;
+#endif
     err = mAllocDev->alloc(mAllocDev, w, h, format, usage, handle, stride);
     ALOGW_IF(err, "alloc(%u, %u, %d, %08x, ...) failed %d (%s)",
             w, h, format, usage, err, strerror(-err));
diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index 0166b89..bf1fbde 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -52,6 +52,10 @@ ifeq ($(TARGET_FORCE_HWC_FOR_VIRTUAL_DISPLAYS),true)
     LOCAL_CFLAGS += -DFORCE_HWC_COPY_FOR_VIRTUAL_DISPLAYS
 endif
 
+ifeq ($(BOARD_EGL_NEEDS_FNW),true)
+    LOCAL_CFLAGS += -DEGL_NEEDS_FNW
+endif
+
 ifneq ($(NUM_FRAMEBUFFER_SURFACE_BUFFERS),)
   LOCAL_CFLAGS += -DNUM_FRAMEBUFFER_SURFACE_BUFFERS=$(NUM_FRAMEBUFFER_SURFACE_BUFFERS)
 endif
diff --git a/services/surfaceflinger/DisplayDevice.cpp b/services/surfaceflinger/DisplayDevice.cpp
index 5f765bd..b954d8b 100755
--- a/services/surfaceflinger/DisplayDevice.cpp
+++ b/services/surfaceflinger/DisplayDevice.cpp
@@ -29,6 +29,10 @@
 
 #include <gui/Surface.h>
 
+#ifdef EGL_NEEDS_FNW
+#include <ui/FramebufferNativeWindow.h>
+#endif
+
 #include <hardware/gralloc.h>
 
 #include "DisplayHardware/DisplaySurface.h"
@@ -75,7 +79,11 @@ DisplayDevice::DisplayDevice(
       mOrientation()
 {
     mNativeWindow = new Surface(producer, false);
+#ifndef EGL_NEEDS_FNW
     ANativeWindow* const window = mNativeWindow.get();
+#else
+    ANativeWindow* const window = new FramebufferNativeWindow();
+#endif
 
     int format;
     window->query(window, NATIVE_WINDOW_FORMAT, &format);
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 4d6fb82..58fdf54 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -1162,6 +1162,7 @@ void SurfaceFlinger::setUpHWComposer() {
             sp<const DisplayDevice> hw(mDisplays[dpy]);
             const int32_t id = hw->getHwcDisplayId();
             if (id >= 0) {
+#ifdef QCOM_HARDWARE
                 // Get the layers in the current drawying state
                 const LayerVector& layers(mDrawingState.layersSortedByZ);
                 bool freezeSurfacePresent = false;
@@ -1181,6 +1182,7 @@ void SurfaceFlinger::setUpHWComposer() {
                         }
                     }
                 }
+#endif
 
                 const Vector< sp<Layer> >& currentLayers(
                     hw->getVisibleLayersSortedByZ());
@@ -1194,6 +1196,7 @@ void SurfaceFlinger::setUpHWComposer() {
                      */
                     const sp<Layer>& layer(currentLayers[i]);
                     layer->setPerFrameData(hw, *cur);
+#ifdef QCOM_HARDWARE
                     if(freezeSurfacePresent) {
                         // if freezeSurfacePresent, set ANIMATING flag
                         cur->setAnimating(true);
@@ -1218,6 +1221,7 @@ void SurfaceFlinger::setUpHWComposer() {
                             lastSurfaceViewLayer = layer;
                         }
                     }
+#endif
                 }
             }
         }
-- 
1.9.1

